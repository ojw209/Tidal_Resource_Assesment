inla_data = Hour_Data %>% mutate(i1 = 1:n(), i2 = 1:n())
inla_formula = PM_Exeter ~ f(i1, model='rw2')
inla_result = inla(formula=inla_formula, data=Hour_Data, family='gamma')
Hour_Data %>% mutate(i1 = 1:n(), i2 = 1:n())
Hour_Data %>% mutate(i1 = 1:n(), i2 = 1:n())
Hour_Data %>% mutate(i1 = 1:n(), i2 = 1:n());
Hour_Data <- Hour_Data %>% mutate(i1 = 1:n(), i2 = 1:n());
View(Hour_Data)
inla_formula = PM_Exeter ~ f(i1, model='rw2')
inla_result = inla(formula=inla_formula, data=Hour_Data, family='gamma')
#Call Required Packages
library(readxl)
library(dplyr)
library(zoo)
library(INLA)
library(lubridate)
library(tidyr)
#Declare Columns Names
ColumnNames <- c('Start','End','PM_Exeter','PM_Alph')
#Read in dataframes from Excel sheets, and remove redundant infomation. [Not the tidiest method, but works.]
X2013 <- read_excel("Stats Modelling/2013.xlsx",sheet = "PM", col_types = c("date", "date","numeric", "numeric", "numeric","text", "text", "text"), skip = 3);
X2013 <-  X2013[, -c(5:8) ];
colnames(X2013) <- ColumnNames;
X2014 <- read_excel("Stats Modelling/2014.xlsx",sheet = "PM", col_types = c("date", "date","numeric", "numeric", "numeric","text", "text", "text"), skip = 3);
X2014 <-  X2014[, -c(5:8) ];
colnames(X2014) <- ColumnNames;
X2015 <- read_excel("Stats Modelling/2015.xlsx",sheet = "PM", col_types = c("date", "date","numeric", "numeric", "numeric","text", "text", "text"), skip = 3);
X2015 <-  X2015[, -c(5:8)  ];
colnames(X2015) <- ColumnNames;
X2016 <- read_excel("Stats Modelling/2016.xlsx",sheet = "PM", col_types = c("date", "date","numeric", "numeric", "numeric","text", "text", "text"), skip = 3);
X2016 <-  X2016[, -c(5:8)  ];
colnames(X2016) <- ColumnNames;
X2017 <- read_excel("Stats Modelling/2017.xlsx",sheet = "PM", col_types = c("date", "date","numeric", "numeric", "numeric","text", "text", "text"), skip = 3);
X2017 <-  X2017[, -c(5:8)  ];
colnames(X2017) <- ColumnNames;
#Combine Data into one dataframe.
PM_Time_Frame <- rbind(X2013,X2014,X2015,X2016,X2017);
#Clean Enivorment
rm(X2013);rm(X2014);rm(X2015);rm(X2016);rm(X2017);
#Na's are dropped for now, whilst a differnt method is sorted.
PM_Time_Frame = drop_na(PM_Time_Frame);
PM_Time_Frame$End = NULL;
summary(PM_Time_Frame)
#Retain hourly average, for betwen August 2017 and December 2017.
Hour_Data <- PM_Time_Frame[PM_Time_Frame$Start >= "2017-08-01" & PM_Time_Frame$Start <= "2017-12-31",]
#Work out daily average for the entire time series.
stat <- function(x) c(mean = mean(x))
PM_Time_Frame$Start = floor_date(PM_Time_Frame$Start,'day')
ag_Exeter <- aggregate(PM_Exeter ~ Start, PM_Time_Frame, stat)
ag_Alph <- aggregate(PM_Alph ~ Start, PM_Time_Frame, stat)
#Create Dataframe for daily date.
Daily_Data <- ag_Exeter;
Daily_Data$PM_Alph <- ag_Alph[,2];
rm(ag_Alph); rm(ag_Exeter);
Hour_Data <- Hour_Data %>% mutate(i1 = 1:n(), i2 = 1:n());
inla_formula = PM_Exeter ~ f(i1, model='rw2')
inla_result = inla(formula=inla_formula, data=Hour_Data, family='gamma')
#Call Required Packages
library(readxl)
library(dplyr)
library(zoo)
library(INLA)
library(lubridate)
library(tidyr)
#Declare Columns Names
ColumnNames <- c('Start','End','PM_Exeter','PM_Alph')
#Read in dataframes from Excel sheets, and remove redundant infomation. [Not the tidiest method, but works.]
X2013 <- read_excel("Stats Modelling/2013.xlsx",sheet = "PM", col_types = c("date", "date","numeric", "numeric", "numeric","text", "text", "text"), skip = 3);
X2013 <-  X2013[, -c(5:8) ];
colnames(X2013) <- ColumnNames;
X2014 <- read_excel("Stats Modelling/2014.xlsx",sheet = "PM", col_types = c("date", "date","numeric", "numeric", "numeric","text", "text", "text"), skip = 3);
X2014 <-  X2014[, -c(5:8) ];
colnames(X2014) <- ColumnNames;
X2015 <- read_excel("Stats Modelling/2015.xlsx",sheet = "PM", col_types = c("date", "date","numeric", "numeric", "numeric","text", "text", "text"), skip = 3);
X2015 <-  X2015[, -c(5:8)  ];
colnames(X2015) <- ColumnNames;
X2016 <- read_excel("Stats Modelling/2016.xlsx",sheet = "PM", col_types = c("date", "date","numeric", "numeric", "numeric","text", "text", "text"), skip = 3);
X2016 <-  X2016[, -c(5:8)  ];
colnames(X2016) <- ColumnNames;
X2017 <- read_excel("Stats Modelling/2017.xlsx",sheet = "PM", col_types = c("date", "date","numeric", "numeric", "numeric","text", "text", "text"), skip = 3);
X2017 <-  X2017[, -c(5:8)  ];
colnames(X2017) <- ColumnNames;
#Combine Data into one dataframe.
PM_Time_Frame <- rbind(X2013,X2014,X2015,X2016,X2017);
#Clean Enivorment
rm(X2013);rm(X2014);rm(X2015);rm(X2016);rm(X2017);
#Na's are dropped for now, whilst a differnt method is sorted.
PM_Time_Frame = drop_na(PM_Time_Frame);
PM_Time_Frame$End = NULL;
summary(PM_Time_Frame)
#Retain hourly average, for betwen August 2017 and December 2017.
Hour_Data <- PM_Time_Frame[PM_Time_Frame$Start >= "2017-08-01" & PM_Time_Frame$Start <= "2017-12-31",]
#Work out daily average for the entire time series.
stat <- function(x) c(mean = mean(x))
PM_Time_Frame$Start = floor_date(PM_Time_Frame$Start,'day')
ag_Exeter <- aggregate(PM_Exeter ~ Start, PM_Time_Frame, stat)
ag_Alph <- aggregate(PM_Alph ~ Start, PM_Time_Frame, stat)
#Create Dataframe for daily date.
Daily_Data <- ag_Exeter;
Daily_Data$PM_Alph <- ag_Alph[,2];
rm(ag_Alph); rm(ag_Exeter);
Hour_Data <- Hour_Data %>% mutate(i1 = 1:n(), i2 = 1:n());
inla_formula = PM_Exeter ~ f(i1, model='rw2')
inla_result = inla(formula=inla_formula, data=Hour_Data, family='gamma')
View(Hour_Data)
inla_result = inla(formula=inla_formula, data=Hour_Data, family='gamma', verbose = TRUE)
Daily_Data <- Daily_Data %>% mutate(i1 = 1:n(), i2 = 1:n());
View(Daily_Data)
View(Hour_Data)
View(Daily_Data)
inla_formula = PM_Exeter ~ f(i1, model='rw2')
inla_result = inla(formula=inla_formula, data=Daily_Data, family='gamma')
print(inla_result)
summary(inla_result)
inla_formula = PM_Exeter ~ f(i1, model='rw2') + f(i2, model='seasonal', season.length=12)
inla_result = inla(formula=inla_formula, data=Daily_Data, family='gamma')
plot(inla_result)
inla_formula$marginals.hyperpar[[1]]
inla_result$marginals.hyperpar[[1]]
#Call Required Packages
library(readxl)
library(dplyr)
library(zoo)
library(INLA)
library(lubridate)
library(tidyr)
#Declare Columns Names
ColumnNames <- c('Start','End','PM_Exeter','PM_Alph')
#Read in dataframes from Excel sheets, and remove redundant infomation. [Not the tidiest method, but works.]
X2013 <- read_excel("Stats Modelling/2013.xlsx",sheet = "PM", col_types = c("date", "date","numeric", "numeric", "numeric","text", "text", "text"), skip = 3);
X2013 <-  X2013[, -c(5:8) ];
colnames(X2013) <- ColumnNames;
X2014 <- read_excel("Stats Modelling/2014.xlsx",sheet = "PM", col_types = c("date", "date","numeric", "numeric", "numeric","text", "text", "text"), skip = 3);
X2014 <-  X2014[, -c(5:8) ];
colnames(X2014) <- ColumnNames;
X2015 <- read_excel("Stats Modelling/2015.xlsx",sheet = "PM", col_types = c("date", "date","numeric", "numeric", "numeric","text", "text", "text"), skip = 3);
X2015 <-  X2015[, -c(5:8)  ];
colnames(X2015) <- ColumnNames;
X2016 <- read_excel("Stats Modelling/2016.xlsx",sheet = "PM", col_types = c("date", "date","numeric", "numeric", "numeric","text", "text", "text"), skip = 3);
X2016 <-  X2016[, -c(5:8)  ];
colnames(X2016) <- ColumnNames;
X2017 <- read_excel("Stats Modelling/2017.xlsx",sheet = "PM", col_types = c("date", "date","numeric", "numeric", "numeric","text", "text", "text"), skip = 3);
X2017 <-  X2017[, -c(5:8)  ];
colnames(X2017) <- ColumnNames;
#Combine Data into one dataframe.
PM_Time_Frame <- rbind(X2013,X2014,X2015,X2016,X2017);
#Clean Enivorment
rm(X2013);rm(X2014);rm(X2015);rm(X2016);rm(X2017);
#Na's are dropped for now, whilst a differnt method is sorted.
PM_Time_Frame = drop_na(PM_Time_Frame);
PM_Time_Frame$End = NULL;
summary(PM_Time_Frame)
#Retain hourly average, for betwen August 2017 and December 2017.
Hour_Data <- PM_Time_Frame[PM_Time_Frame$Start >= "2017-08-01" & PM_Time_Frame$Start <= "2017-12-31",]
#Work out daily average for the entire time series.
stat <- function(x) c(mean = mean(x))
PM_Time_Frame$Start = floor_date(PM_Time_Frame$Start,'day')
ag_Exeter <- aggregate(PM_Exeter ~ Start, PM_Time_Frame, stat)
ag_Alph <- aggregate(PM_Alph ~ Start, PM_Time_Frame, stat)
#Create Dataframe for daily date.
Daily_Data <- ag_Exeter;
Daily_Data$PM_Alph <- ag_Alph[,2];
rm(ag_Alph); rm(ag_Exeter);
Hour_Data <- Hour_Data %>% mutate(i1 = 1:n(), i2 = 1:n());
Daily_Data <- Daily_Data %>% mutate(i1 = 1:n(), i2 = 1:n());
inla_formula = PM_Exeter ~ f(i1, model='rw2') + f(i2, model='seasonal', season.length=12)
inla_result = inla(formula=inla_formula, data=Daily_Data, family='gamma')
as.data.frame(inla_result$marginals.hyperpar[[1]])
plot(as.data.frame(inla_result$marginals.hyperpar[[1]]))
inla_formula = PM_Exeter ~ f(i1, model='rw2') + time
inla_formula = PM_Exeter ~  time
inla_result = inla(formula=inla_formula, data=Daily_Data, family='gamma')
Daily_Data <- Daily_Data %>% mutate(i1 = 1:n(), i2 = 1:n(), time = 1:n());
inla_formula = PM_Exeter ~  time
inla_result = inla(formula=inla_formula, data=Daily_Data, family='gamma')
plot(inla_result)
inla_formula = PM_Exeter ~  time
inla_result = inla(formula=inla_formula, data=Daily_Data, family='gamma')
inla_result$waic
inla_result$waic$waic
inla_result = inla(formula=inla_formula, data=Daily_Data, family='gamma',control.compute=list(waic=TRUE))
inla_result$waic
inla_result$waic$waic
inla_formula = PM_Exeter ~  time
inla_result = inla(formula=inla_formula, data=Daily_Data, family='gaussian',control.compute=list(waic=TRUE))
inla_result$waic$waic
inla_formula = PM_Exeter ~  time + f(i1, model='rw1');
inla_result = inla(formula=inla_formula, data=Daily_Data, family='gaussian',control.compute=list(waic=TRUE))
inla_result$waic$waic
summary(inla_result)
inla_formula = PM_Exeter ~  time + f(i1, model='ar1');
inla_result = inla(formula=inla_formula, data=Daily_Data, family='gaussian',control.compute=list(waic=TRUE))
inla_formula = PM_Exeter ~  time + f(i1, model='ar2');
inla_result = inla(formula=inla_formula, data=Daily_Data, family='gaussian',control.compute=list(waic=TRUE))
inla_formula = PM_Exeter ~  time + f(i1, model='iid');
inla_result = inla(formula=inla_formula, data=Daily_Data, family='gaussian',control.compute=list(waic=TRUE))
inla_result$waic$waic
inla_formula = PM_Exeter ~  time + f(i1, model='iid');
inla_result = inla(formula=inla_formula, data=Daily_Data, family='gaussian',control.compute=list(waic=TRUE), prec=list(prior = 'loggamma',
param = c(100,100))))))
inla_formula = PM_Exeter ~  time + f(i1, model='iid');
inla_result = inla(formula=inla_formula, data=Daily_Data, family='gaussian',control.compute=list(waic=TRUE), prec=list(prior = 'loggamma', param = c(100,100)))
inla_formula = PM_Exeter ~  time + f(i1, model='iid');
inla_result = inla(formula=inla_formula, data=Daily_Data, family='gaussian',control.compute=list(waic=TRUE),control.family=list(hyper = list(prec=list(prior = 'loggamma', param = c(100,100))))
test
inla_formula = PM_Exeter ~  time + f(i1, model='iid');
inla_result = inla(formula=inla_formula, data=Daily_Data, family='gaussian',control.compute=list(waic=TRUE),control.family=list(hyper = list(prec=list(prior = 'loggamma', param = c(100,100)))))
inla_result$waic$waic
inla_formula = PM_Exeter ~  time + f(i1, model='rw1') + f(i1,model = 'idd');
inla_result = inla(formula=inla_formula, data=Daily_Data, family='gaussian',control.compute=list(waic=TRUE),control.family=list(hyper = list(prec=list(prior = 'loggamma', param = c(100,100)))))
inla_result$waic$waic
inla_formula = PM_Exeter ~  time + f(i1, model='rw1') + f(i1,model = 'iid');
inla_result = inla(formula=inla_formula, data=Daily_Data, family='gaussian',control.compute=list(waic=TRUE),control.family=list(hyper = list(prec=list(prior = 'loggamma', param = c(100,100)))))
inla_result$waic$waic
inla_formula = PM_Exeter ~  time + f(i1, model='rw1') + f(i2,model = 'iid');
inla_result = inla(formula=inla_formula, data=Daily_Data, family='gaussian',control.compute=list(waic=TRUE),control.family=list(hyper = list(prec=list(prior = 'loggamma', param = c(100,100)))))
inla_result$waic$waic
inla_formula = PM_Exeter ~  time + f(i1, model='rw1') + f(i2,model = 'ar1');
inla_result = inla(formula=inla_formula, data=Daily_Data, family='gaussian',control.compute=list(waic=TRUE),control.family=list(hyper = list(prec=list(prior = 'loggamma', param = c(100,100)))))
inla_result$waic$waic
inla_formula = PM_Exeter ~  time + f(i1, model='rw1') + f(i2,model = 'ar1');
inla_result = inla(formula=inla_formula, data=Daily_Data, family='gamma',control.compute=list(waic=TRUE),control.family=list(hyper = list(prec=list(prior = 'loggamma', param = c(100,100)))))
inla_result$waic$waic
inla_formula = PM_Exeter ~  time + f(i1, model='rw1') + f(i2,model = 'seasonal',, season.length=12));
inla_result = inla(formula=inla_formula, data=Daily_Data, family='gamma',control.compute=list(waic=TRUE),control.family=list(hyper = list(prec=list(prior = 'loggamma', param = c(100,100)))))
inla_result$waic$waic
inla_formula = PM_Exeter ~  time + f(i1, model='rw1') + f(i2,model = 'seasonal',, season.length=12);
inla_result = inla(formula=inla_formula, data=Daily_Data, family='gamma',control.compute=list(waic=TRUE),control.family=list(hyper = list(prec=list(prior = 'loggamma', param = c(100,100)))))
inla_result$waic$waic
View(PM_Time_Frame)
View(PM_Time_Frame)
t <- ggplot(PM_Time_Frame, aes(Start,PM_Exeter))
library(ggplot2)
t <- ggplot(PM_Time_Frame, aes(Start,PM_Exeter))
t
t <- ggplot(PM_Time_Frame, aes(Start,PM_Exeter)) + geom_line()
t
t <- ggplot(PM_Time_Frame, aes(x = Start)) + geom_line(aex(y = PM_Exeter))
t <- ggplot(PM_Time_Frame, aes(x = Start)) + geom_line(aes(y = PM_Exeter))
t
t <- ggplot(PM_Time_Frame, aes(x = Start)) + geom_line(aes(y = PM_Exeter)) + geom_line(aes(y = PM_Alph))
t
theme_set(theme_minimal())
t<- ggplot(PM_Time_Frame, aes(x = Start)) + geom_line(aes(y = PM_Exeter)) + geom_line(aes(y = PM_Alph))
t
t<- ggplot(PM_Time_Frame, aes(x = Start)) + geom_line(aes(y = PM_Exeter), geom_line(color = "#00AFBB", size = 2)) + geom_line(aes(y = PM_Alph),geom_line(color = "#FC4E07", size = 2))
t<- ggplot(PM_Time_Frame, aes(x = Start)) + geom_line(aes(y = PM_Exeter),color = "#FC4E07", size = 2) + geom_line(aes(y = PM_Alph),color = "#FC4E07", size = 2)
t
t<- ggplot(PM_Time_Frame, aes(x = Start)) + geom_line(aes(y = PM_Exeter),color = "#FC4E07", size = .5) + geom_line(aes(y = PM_Alph),color = "#FC4E07", size = .5)
t<- ggplot(PM_Time_Frame, aes(x = Start)) + geom_line(aes(y = PM_Exeter),color = "#00AFBB", size = .5) + geom_line(aes(y = PM_Alph),color = "#FC4E07", size = .5)
t
t<- ggplot(PM_Time_Frame, aes(x = Start)) + geom_line(aes(y = PM_Exeter),color = "#00AFBB", size = .5) +
geom_line(aes(y = PM_Alph),color = "#FC4E07", size = .5)
t<- ggplot(PM_Time_Frame, aes(x = Start)) + geom_line(aes(y = PM_Exeter),color = "#00AFBB", size = .5) +
geom_line(aes(y = PM_Alph),color = "#FC4E07", size = .5) + xlab('Time') + ylab('PM10')
t
t<- ggplot(PM_Time_Frame, aes(x = Start)) + geom_line(aes(y = PM_Exeter),color = "#00AFBB", size = .5) +
geom_line(aes(y = PM_Alph),color = "#FC4E07", size = .5) + xlab('Time') + ylab('PM10')+ labs
t<- ggplot(PM_Time_Frame, aes(x = Start)) + geom_line(aes(y = PM_Exeter),color = "#00AFBB", size = .5) +
geom_line(aes(y = PM_Alph),color = "#FC4E07", size = .5) + xlab('Time') + ylab('PM10')+ labs()
t
t<- ggplot(PM_Time_Frame, aes(x = Start)) + geom_line(aes(y = PM_Exeter),color = "#00AFBB", size = .5) +
geom_line(aes(y = PM_Alph),color = "#FC4E07", size = .5) + xlab('Time') + ylab('PM10')+ labs + title('PM10 Concetration Over Time')
t<- ggplot(PM_Time_Frame, aes(x = Start)) + geom_line(aes(y = PM_Exeter),color = "#00AFBB", size = .5) +
geom_line(aes(y = PM_Alph),color = "#FC4E07", size = .5) + xlab('Time') + ylab('PM10')+ title('PM10 Concetration Over Time')
t<- ggplot(PM_Time_Frame, aes(x = Start)) + geom_line(aes(y = PM_Exeter),color = "#00AFBB", size = .5) +
geom_line(aes(y = PM_Alph),color = "#FC4E07", size = .5) + xlab('Time') + ylab('PM10')+ ggtitle('PM10 Concetration Over Time')
t
View(Daily_Data)
rad2deg <- function(rad) {
deg = (rad * 180) / (pi)
deg = ifelse(deg < 0, deg + 360, deg)
}
#Function to read in NETCDF files
NC_READ_IN <-function(M_Start,M_END,READ_START,READ_COUNT,DEPTH) {
i = 1
folder_path = "MARS3D/"
ncname_gen = "MARC_F1-MARS3D-ARMOR_2018"
ALD_EXTENT = extent(READ_START[1],READ_START[1] + READ_COUNT[1],READ_START[2],READ_START[2] + READ_COUNT[2])
DInM = c(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)
for (month in M_START:M_END) {
cat("---------- \n")
cat("Month:", month, "\n")
cat("----------\n")
if (month < 10) {
m_pre = as.character(month)
m_post = paste("0", m_pre, sep = "")
} else {
m_post = as.character(month)
}
for (day in 1:DInM[month]) {
print(day)
if (day < 10) {
d_pre = as.character(day)
d_post = paste("0", d_pre, sep = "")
} else {
d_post = as.character(day)
}
for (hour in sample(c(0:23),1)) {
if (hour < 10) {
h_pre = as.character(hour)
h_post = paste("0", h_pre, "00", sep = "")
} else {
h_pre = as.character(hour)
h_post = paste(h_pre, "00", sep = "")
}
FILE_N = paste(folder_path,ncname_gen,m_post,d_post,"T",h_post,"Z.nc",sep = "")
err_test = try(nc_open(FILE_N))
if (inherits(err_test, "try-error") == FALSE) {
Vel_U_Rast = FILE_N %>%
raster(varname = "UZ", layer = DEPTH) %>%
crop(y = ALD_EXTENT) %>% shift(., dy = -0.5) %>% {
if (i > 1)
stack(., Vel_U_Rast)
else
.
}
Vel_V_Rast = FILE_N %>%
raster(varname = "VZ", layer = DEPTH) %>%
crop(y = ALD_EXTENT) %>% shift(., dx = -0.5) %>% {
if (i > 1)
stack(., Vel_V_Rast)
else
.
}
Depth_Rast = FILE_N %>%
raster(varname = "XE", layer = DEPTH) %>%
crop(y = ALD_EXTENT) %>% {
if (i > 1)
stack(., Depth_Rast)
else
.
}
}
else {
cat("Error at:", FILE_N, "\n")
closeAllConnections()
}
rm(err_test)
i = i + 1
}
}
}
Long_grid_Rast = FILE_N %>% raster(., varname = "longitude") %>% crop(y = ALD_EXTENT)
Lat_grid_Rast =  FILE_N %>% raster(., varname = "latitude") %>% crop(y = ALD_EXTENT)
return = list(Long_grid_Rast,Lat_grid_Rast,Vel_U_Rast, Vel_V_Rast,Depth_Rast)
}
library(raster)
library(tidyverse)
library(RColorBrewer)
library(zeallot)
library(ncdf4)
library(lubridate)
library(extRemes)#
library(raster)
library(tidyverse)
library(RColorBrewer)
library(zeallot)
library(ncdf4)
library(lubridate)
library(extRemes)
c(Long_grid_Rast,Lat_grid_Rast,Vel_U_Rast,Vel_V_Rast,Depth_Rast) %<-% NC_READ_IN(M_START, M_END, READ_START, READ_COUNT, DEPTH)
#NETCDF-Temporal Length
M_START = 1
M_END = 2
#NETCDF-Spatial Length
READ_START = c(240, 240)
READ_COUNT = c(70, 70)
DEPTH = 40
c(Long_grid_Rast,Lat_grid_Rast,Vel_U_Rast,Vel_V_Rast,Depth_Rast) %<-% NC_READ_IN(M_START, M_END, READ_START, READ_COUNT, DEPTH)
library(raster)
library(tidyverse)
library(RColorBrewer)
library(zeallot)
library(ncdf4)
library(lubridate)
library(extRemes)
#NETCDF-Temporal Length
M_START = 3
M_END = 4
#NETCDF-Spatial Length
READ_START = c(240, 240)
READ_COUNT = c(70, 70)
DEPTH = 40
#Extent = [-2.304063, -1.836719, 49.56459, 49.86526] - +proj=longlat +datum=WGS84
#Res_x = 0.03338172
#Res_y = 0.03340757
site_list = list(c(4, 4), c(6, 4), c(6, 5), c(10, 6))
#NOTE:Needs justification of alignment with site_list 1
site_list_2 = list(c(10, 30), c(20, 30), c(25, 35), c(35, 40))
#Call File_Read In Function.
c(Long_grid_Rast,Lat_grid_Rast,Vel_U_Rast,Vel_V_Rast,Depth_Rast) %<-% NC_READ_IN(M_START, M_END, READ_START, READ_COUNT, DEPTH)
print(day)
rad2deg <- function(rad) {
deg = (rad * 180) / (pi)
deg = ifelse(deg < 0, deg + 360, deg)
}
#Function to read in NETCDF files
NC_READ_IN <-function(M_Start,M_END,READ_START,READ_COUNT,DEPTH) {
i = 1
folder_path = "MARS3D/"
ncname_gen = "MARC_F1-MARS3D-ARMOR_2018"
ALD_EXTENT = extent(READ_START[1],READ_START[1] + READ_COUNT[1],READ_START[2],READ_START[2] + READ_COUNT[2])
DInM = c(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)
for (month in M_START:M_END) {
cat("---------- \n")
cat("Month:", month, "\n")
cat("----------\n")
if (month < 10) {
m_pre = as.character(month)
m_post = paste("0", m_pre, sep = "")
} else {
m_post = as.character(month)
}
for (day in 1:DInM[month]) {
print(day)
if (day < 10) {
d_pre = as.character(day)
d_post = paste("0", d_pre, sep = "")
} else {
d_post = as.character(day)
}
for (hour in c(0:23)) {
if (hour < 10) {
h_pre = as.character(hour)
h_post = paste("0", h_pre, "00", sep = "")
} else {
h_pre = as.character(hour)
h_post = paste(h_pre, "00", sep = "")
}
FILE_N = paste(folder_path,ncname_gen,m_post,d_post,"T",h_post,"Z.nc",sep = "")
err_test = try(nc_open(FILE_N))
if (inherits(err_test, "try-error") == FALSE) {
Vel_U_Rast = FILE_N %>%
raster(varname = "UZ", layer = DEPTH) %>%
crop(y = ALD_EXTENT) %>% shift(., dy = -0.5) %>% {
if (i > 1)
stack(., Vel_U_Rast)
else
.
}
Vel_V_Rast = FILE_N %>%
raster(varname = "VZ", layer = DEPTH) %>%
crop(y = ALD_EXTENT) %>% shift(., dx = -0.5) %>% {
if (i > 1)
stack(., Vel_V_Rast)
else
.
}
Depth_Rast = FILE_N %>%
raster(varname = "XE", layer = DEPTH) %>%
crop(y = ALD_EXTENT) %>% {
if (i > 1)
stack(., Depth_Rast)
else
.
}
}
else {
cat("Error at:", FILE_N, "\n")
closeAllConnections()
}
rm(err_test)
i = i + 1
}
}
}
Long_grid_Rast = FILE_N %>% raster(., varname = "longitude") %>% crop(y = ALD_EXTENT)
Lat_grid_Rast =  FILE_N %>% raster(., varname = "latitude") %>% crop(y = ALD_EXTENT)
return = list(Long_grid_Rast,Lat_grid_Rast,Vel_U_Rast, Vel_V_Rast,Depth_Rast)
}
library(raster)
library(tidyverse)
library(RColorBrewer)
library(zeallot)
library(ncdf4)
library(lubridate)
library(extRemes)
#NETCDF-Temporal Length
M_START = 3
M_END = 4
#NETCDF-Spatial Length
READ_START = c(240, 240)
READ_COUNT = c(70, 70)
DEPTH = 40
#Extent = [-2.304063, -1.836719, 49.56459, 49.86526] - +proj=longlat +datum=WGS84
#Res_x = 0.03338172
#Res_y = 0.03340757
site_list = list(c(4, 4), c(6, 4), c(6, 5), c(10, 6))
#NOTE:Needs justification of alignment with site_list 1
site_list_2 = list(c(10, 30), c(20, 30), c(25, 35), c(35, 40))
#Call File_Read In Function.
c(Long_grid_Rast,Lat_grid_Rast,Vel_U_Rast,Vel_V_Rast,Depth_Rast) %<-% NC_READ_IN(M_START, M_END, READ_START, READ_COUNT, DEPTH)
setwd('K:/Marine Renewables/R_Assesment')
#NETCDF-Temporal Length
M_START = 3
M_END = 4
#NETCDF-Spatial Length
READ_START = c(240, 240)
READ_COUNT = c(70, 70)
DEPTH = 40
#Extent = [-2.304063, -1.836719, 49.56459, 49.86526] - +proj=longlat +datum=WGS84
#Res_x = 0.03338172
#Res_y = 0.03340757
site_list = list(c(4, 4), c(6, 4), c(6, 5), c(10, 6))
#NOTE:Needs justification of alignment with site_list 1
site_list_2 = list(c(10, 30), c(20, 30), c(25, 35), c(35, 40))
#Call File_Read In Function.
c(Long_grid_Rast,Lat_grid_Rast,Vel_U_Rast,Vel_V_Rast,Depth_Rast) %<-% NC_READ_IN(M_START, M_END, READ_START, READ_COUNT, DEPTH)
View(Vel_U_Rast)
save.image("K:/Marine Renewables/R_Assesment/Vel_Rast_Data/VEL_RAST_3_4.RData")
View(Vel_U_Rast)
